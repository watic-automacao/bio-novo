!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Button=e():t.Button=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=4)}([function(t,e,n){var r=n(5),i=n(6),a=n(7);t.exports=function(t){return r(t)||i(t)||a()}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){var r,i,a;i=[e,n(0),n(1),n(2),n(8),n(9),n(10)],void 0===(a="function"==typeof(r=function(t,e,r,i,a,o,s){"use strict";var u=n(3);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,e=u(e),r=u(r),i=u(i),o=u(o);var c=function(){function t(e){var n=e.data,i=e.config,s=e.api;(0,r.default)(this,t),this.api=s,this.config=i,this.config.label=i.label||"Button",this.config.classes=i.classes||["button"],this.config.target=i.target||a.TargetOptionsEnum.SELF,this._DOMService=new o.default,this._data=Object.assign({label:this.config.label,target:this.config.target},n),this._tuneSettings=[{title:"centered",icon:'<svg width="15" height="15" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="align-center" class="svg-inline--fa fa-align-center fa-w-14" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M432 160H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0 256H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM108.1 96h231.81A12.09 12.09 0 0 0 352 83.9V44.09A12.09 12.09 0 0 0 339.91 32H108.1A12.09 12.09 0 0 0 96 44.09V83.9A12.1 12.1 0 0 0 108.1 96zm231.81 256A12.09 12.09 0 0 0 352 339.9v-39.81A12.09 12.09 0 0 0 339.91 288H108.1A12.09 12.09 0 0 0 96 300.09v39.81a12.1 12.1 0 0 0 12.1 12.1z"></path></svg>'},{title:"stretched",icon:'<svg width="17" height="10" viewBox="0 0 17 10" xmlns="http://www.w3.org/2000/svg"><path d="M13.568 5.925H4.056l1.703 1.703a1.125 1.125 0 0 1-1.59 1.591L.962 6.014A1.069 1.069 0 0 1 .588 4.26L4.38.469a1.069 1.069 0 0 1 1.512 1.511L4.084 3.787h9.606l-1.85-1.85a1.069 1.069 0 1 1 1.512-1.51l3.792 3.791a1.069 1.069 0 0 1-.475 1.788L13.514 9.16a1.125 1.125 0 0 1-1.59-1.591l1.644-1.644z"/></svg>'},{title:"large",icon:'<svg width="15" height="15" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="expand" class="svg-inline--fa fa-expand fa-w-14" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z"></path></svg>'}]}return(0,i.default)(t,[{key:"render",value:function(){var t=this;this._container=this._DOMService.make("div",[this.CSS.baseClass,this.CSS.container]);var n=this._DOMService.makeButton(this._data.label||this.config.label,[this.CSS.buttonEl].concat((0,e.default)(this.config.classes))),r=this._DOMService.make("div",[this.CSS.formEl]),i=this._DOMService.makeInput("url",this._data.url||"","https://...",[this.CSS.input,this.CSS.inputEl,"url"]),o=this._DOMService.makeInput("label",this._data.label||this.config.label,this.config.label,[this.CSS.input,this.CSS.inputEl,"button-label"]),s=this._DOMService.makeSelect("target",Object.values(a.TargetOptionsEnum),this._data.target||this.config.target,[this.CSS.input,this.CSS.selectEl,"target"]);return this._container.classList.add("button-container"),this._container.appendChild(n),this._container.appendChild(r),r.appendChild(i),r.appendChild(o),r.appendChild(s),this._tuneSettings.forEach(function(e){t._data[e.title]&&t._container.classList.add(e.title)}),i.addEventListener("keyup",function(){t._updateData(i,"url")}),o.addEventListener("keyup",function(){t._updateData(o,"label"),n.innerText=o.value}),s.addEventListener("change",function(){t._updateData(s,"target")}),this._container}},{key:"save",value:function(){return this._saveData=Object.assign({label:"",url:"",target:""},this._data),this._saveData}},{key:"validate",value:function(t){return!!t.url.trim()&&!!t.label.trim()}},{key:"renderSettings",value:function(){var t=this,e=this._DOMService.make("div",[]);return this._tuneSettings.forEach(function(n){var r=t._DOMService.make("div",["cdx-settings-button"]);void 0!==t._data[n.title]&&r.classList.toggle("cdx-settings-button--active",t._data[n.title]),r.innerHTML=n.icon,e.appendChild(r),r.addEventListener("click",function(){t._toggleTune(n.title),r.classList.toggle("cdx-settings-button--active")})}),e}},{key:"_updateData",value:function(t,e){this._data[e]=t.value}},{key:"_toggleTune",value:function(t){this._data[t]=!this._data[t],this._acceptTuneView()}},{key:"_acceptTuneView",value:function(){var t=this;this._tuneSettings.forEach(function(e){t._container.classList.toggle(e.title,!!t._data[e.title])})}},{key:"CSS",get:function(){return{baseClass:this.api.styles.block,input:this.api.styles.input,container:"button-container",buttonEl:"button-container__button",formEl:"button-container__form",inputEl:"button-container__form__input",selectEl:"button-container__form__select"}}},{key:"saveData",get:function(){return this._saveData}}],[{key:"toolbox",get:function(){return{title:"Button",icon:'<svg width="13" height="14" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="external-link-square-alt" class="svg-inline--fa fa-external-link-square-alt fa-w-14" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M448 80v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48zm-88 16H248.029c-21.313 0-32.08 25.861-16.971 40.971l31.984 31.987L67.515 364.485c-4.686 4.686-4.686 12.284 0 16.971l31.029 31.029c4.687 4.686 12.285 4.686 16.971 0l195.526-195.526 31.988 31.991C358.058 263.977 384 253.425 384 231.979V120c0-13.255-10.745-24-24-24z"></path></svg>'}}}]),t}();t.default=c})?r.apply(e,i):r)||(t.exports=a)},function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(t,e,n){var r,i,a;i=[e],void 0===(a="function"==typeof(r=function(t){"use strict";var e;Object.defineProperty(t,"__esModule",{value:!0}),t.TargetOptionsEnum=void 0,t.TargetOptionsEnum=e,function(t){t.SELF="_self",t.BLANK="_blank",t.PARENT="_parent",t.TOP="_top"}(e||(t.TargetOptionsEnum=e={}))})?r.apply(e,i):r)||(t.exports=a)},function(t,e,n){var r,i,a;i=[e,n(0),n(1),n(2)],void 0===(a="function"==typeof(r=function(t,e,r,i){"use strict";var a=n(3);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,e=a(e),r=a(r),i=a(i);var o=function(){function t(){(0,r.default)(this,t)}return(0,i.default)(t,[{key:"make",value:function(t,e){var n=document.createElement(t);return this.mapClasses(n,e),n}},{key:"makeButton",value:function(t,e){var n=document.createElement("button");return n.innerText=t,this.mapClasses(n,e),n}},{key:"makeInput",value:function(t,e,n,r){var i=document.createElement("input");return i.name=t,i.value=e,i.placeholder=n,this.mapClasses(i,r),i}},{key:"makeSelect",value:function(t,e,n,r){var i=this,a=document.createElement("select");return this.mapClasses(a,r),e.map(function(t){a.appendChild(i.makeOption(t,t,n))}),a}},{key:"makeOption",value:function(t,e,n){var r=document.createElement("option");return r.innerText=e,r.value=t,r.selected=t===n,r}},{key:"mapClasses",value:function(t,n){var r;(r=t.classList).add.apply(r,(0,e.default)(n))}}]),t}();t.default=o})?r.apply(e,i):r)||(t.exports=a)},function(t,e,n){var r=n(11);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(13)(r,i);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(12)(!1)).push([t.i,".button-container__button {\n  margin-bottom: 15px;\n}\n\n.button-container__form {\n  display: flex;\n}\n\n.button-container__form__input {\n  margin: 0 5px 15px;\n}\n\n.button-container__form__select {\n  height: 36px;\n  margin: 0 5px 15px;\n}\n\n.button-container.centered .button-container__button {\n  display: block;\n  margin: 0 auto 15px;\n}\n\n.button-container.stretched .button-container__button {\n  width: 100%\n}\n\n.button-container.large .button-container__button {\n  display: block;\n  font-size: 200%;\n}\n",""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(o=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(a).concat([i]).join("\n")}var o;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(r[a]=!0)}for(i=0;i<t.length;i++){var o=t[i];"number"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),e.push(o))}},e}},function(t,e,n){var r,i,a={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(t){var e={};return function(t){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,c=0,l=[],f=n(14);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=a[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(m(r.parts[o],e))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(m(r.parts[o],e));a[r.id]={id:r.id,refs:1,parts:s}}}}function d(t,e){for(var n=[],r={},i=0;i<t.length;i++){var a=t[i],o=e.base?a[0]+e.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function h(t,e){var n=s(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,i)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function b(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),g(e,t.attrs),h(t,e),e}function g(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function m(t,e){var n,r,i,a;if(e.transform&&t.css){if(!(a=e.transform(t.css)))return function(){};t.css=a}if(e.singleton){var o=c++;n=u||(u=b(e)),r=x.bind(null,n,o,!1),i=x.bind(null,n,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,i=n.sourceMap,a=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||a)&&(r=f(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,n,e),i=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return p(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var o=n[i];(s=a[o.id]).refs--,r.push(s)}t&&p(d(t,e),e);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete a[s.id]}}}};var y,_=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function x(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=_(e,i);else{var a=document.createTextNode(i),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(a,o[e]):t.appendChild(a)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var i,a=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}}]).default});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,